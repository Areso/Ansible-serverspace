---

# print names
- debug:
    msg: "{{ inventory_hostname }}"

# get the local username under which the playbook is running
- name: get_the_username
  become: False
  local_action: command whoami
  register: local_username
  delegate_to: localhost

# delete records from the user's known_hosts
- name: delete_records_from_know_hosts
  shell: "ssh-keygen -f '/home/{{ local_username.stdout }}/.ssh/known_hosts' -R {{ inventory_hostname }}"
  delegate_to: localhost
  ignore_errors: True

# delete records from the user's known_hosts
- name: delete_records_from_know_hosts_no_path
  shell: "ssh-keygen -R {{ inventory_hostname }}"
  delegate_to: localhost
  ignore_errors: True

# create vm
- name: vm_create
  uri:
    url: "https://api.serverspace.ru/api/v1/servers"
    method: POST
    headers:
      "x-api-key": "{{ xapikey }}"
    body:
      location_id: "{{ locations.us_east }}"
      image_id: "{{ images.ub1804 }}"
      cpu: "{{ cpu.tiny | int }}"
      ram_mb: "{{ ram.tiny | int }}"
      volumes: [{
        "name": "boot",
        "size_mb": 25600
      }]
      networks: [{
        "bandwidth_mbps": 50
      }]
      name: "{{ inventory_hostname }}"
      ssh_key_ids: [8322]
      applications_ids: []
      server_init_script: ""
      tags: ["hackaton"]
    body_format: json
    status_code: 201
  register: vm_create_result
  changed_when: 201
  delegate_to: localhost

- name: set_task_id
  set_fact:
    task_id: "{{ vm_create_result.json.task_id }}"

- name: only_finished_task_would_return_server_id
  pause:
    seconds: 90

- name: get_task
  uri:
    url: "https://api.serverspace.{{ sp_domain }}/api/v1/tasks/{{ task_id }}"
    method: GET
    headers:
      "x-api-key": "{{ xapikey }}"
    body_format: json
    status_code: 200
  register: task_answer
  changed_when: 200
  delegate_to: localhost


- name: set_task_status
  set_fact:
    task_status: "{{ task_answer.json.task.is_completed }}"

- name: Install, configure, and start Apache
  block:

  - name: set_server_id
    set_fact:
      server_id: "{{ task_answer.json.task.server_id }}"

  - name: print_server_id
    debug:
      msg: "{{ server_id }}"
  
    # get vm details
  - name: get_vm_details
    uri:
      url: "https://api.serverspace.ru/api/v1/servers/{{ server_id }}"
      method: GET
      headers:
        "x-api-key": "{{ xapikey }}"
      body_format: json
      status_code: 200
    register: vm_details
    changed_when: 200
    delegate_to: localhost

  - name: print_vm_details
    debug:
      msg: "{{ vm_details }}"
  
  - name: set_root_password
    set_fact:
      root_password: "{{ vm_details.json.server.password }}"
  
  - name: print_root_password
    debug:
      msg: "{{ root_password }}"

  - name: set_ip
    set_fact:
      server_ip: "{{ vm_details.json.server.nics[0].ip_address }}"
  
  - name: print_ip
    debug:
      msg: "{{ server_ip }}"

  - name: remove_server_fingerprints_if_any
    command: 'ssh-keygen -f ~/.ssh/known_hosts -R {{ server_ip }}'
    register: result_of_removing
    delegate_to: localhost

  - name: print_result_of_removing
    debug:
      msg: "{{ result_of_removing }}"

  - name: get_fingerprint_from_remote_host
    shell: "ssh-keyscan -H -t rsa {{ server_ip }} >> ~/.ssh/known_hosts"
    register: result_of_adding_fingerprint
    delegate_to: localhost

  - name: print_result_of_adding_fingerprint
    debug:
      msg: "{{ result_of_adding_fingerprint }}"

  - name: set_user_password
    set_fact:
      user_password: "{{ root_password }}Hardening"
  
  - name: print_user_password
    debug:
      msg: "{{ user_password }}"

  - name: add_new_user_to_remote_host
    shell: "useradd -m -d /home/hackatoner -p $(openssl passwd -1 {{ user_password }}) hackatoner"
    register: add_new_user_result
    delegate_to: "{{ server_ip }}"

  - name: print_add_new_user_result
    debug:
      msg: "{{ add_new_user_result }}"

  - name: add_hackatoner_user_to_sudo_group
    command: "usermod -aG sudo hackatoner"
    register: add_to_sudo_group_result
    delegate_to: "{{ server_ip }}"

  - name: print_add_to_sudo_group_result
    debug:
      msg: "{{ add_to_sudo_group_result }}"

  - name: add_host_to_hosts
    shell: "echo '{{ server_ip }} {{ inventory_hostname }} # {{ vm_tag }}' >> /etc/hosts"
    become: yes
    delegate_to: localhost
    when: dns == "local"
  
  - name: clfl_add_dns_record
    uri:
      url: "https://api.cloudflare.com/client/v4/zones/{{ clfl_zone_id }}/dns_records"
      method: POST
      headers:
        "X-Auth-Key": "{{ clfl_auth_key }}"
        "X-Auth-Email": "{{ clfl_auth_email }}"
      body_format: json
      body:
        content: "{{ server_ip }}"
        name: "{{ inventory_hostname }}.{{ user_domain }}"
        proxied: False
        type: "A"
        comment: "serverspace"
        ttl: 3600
      status_code: 200
    register: dns_records
    changed_when: 200
    delegate_to: localhost
    when: dns == "cloudflare"
    
  when: task_status == "Completed"
