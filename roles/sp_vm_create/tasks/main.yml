---
# we need to be sure that sudo password is provided
# for local editing /etc/hosts
# in case dns is set to local (it is default option)
- name: check_become_before_execution
  command: "echo 1"
  become: yes
  delegate_to: localhost
  when: dns == "local"

- name: get_dns_records_from_sp
  uri:
    url: https://api.serverspace.{{ sp_domain }}/api/v1/domains/{{ user_domain_sp }}/records
    method: GET
    headers:
      "x-api-key": "{{ xapikey }}"
    body_format: json
    status_code: 200
  register: sp_dns_records
  changed_when: 200
  delegate_to: localhost
  run_once: True
  when: dns == "serverspace"

- name: set_vm_name_from_fqdn
  set_fact:
    vm_name: "{{ inventory_hostname.split('.')[0] }}"

# get the local username under which the playbook is running
- name: get_the_username
  become: False
  local_action: command whoami
  register: local_username
  delegate_to: localhost

# this block doesn't have OS family condition, because we don't know
# what previous OS was (on the previous VM)

# delete FQDN, if apply
# delete records from the user's known_hosts
- name: delete_records_from_know_hosts
  shell: "ssh-keygen -f '/home/{{ local_username.stdout }}/.ssh/known_hosts' -R {{ inventory_hostname }}"
  delegate_to: localhost
  ignore_errors: True

# delete records from the user's known_hosts
- name: delete_records_from_know_hosts_no_path
  shell: "ssh-keygen -R {{ inventory_hostname }}"
  delegate_to: localhost
  ignore_errors: True

# delete shortname, if apply
# delete records from the user's known_hosts
- name: delete_records_from_know_hosts
  shell: "ssh-keygen -f '/home/{{ local_username.stdout }}/.ssh/known_hosts' -R {{ vm_name }}"
  delegate_to: localhost
  ignore_errors: True

# delete records from the user's known_hosts
- name: delete_records_from_know_hosts_no_path
  shell: "ssh-keygen -R {{ vm_name }}"
  delegate_to: localhost
  ignore_errors: True

- name: import_vm_create_nix
  include_tasks: call_nix_deploy.yml
  when: os_family == 'nix'

- name: import_vm_create_windows
  include_tasks: call_windows_deploy.yml
  when: os_family == 'windows'

- name: set_task_id
  set_fact:
    task_id: "{{ vm_create_result.json.task_id }}"

- name: only_finished_task_would_return_server_id
  pause:
    seconds: "{{ time_for_deploy }}"

- name: get_task_details
  uri:
    url: "https://api.serverspace.{{ sp_domain }}/api/v1/tasks/{{ task_id }}"
    method: GET
    headers:
      "x-api-key": "{{ xapikey }}"
    body_format: json
    status_code: 200
  register: task_answer
  changed_when: 200
  delegate_to: localhost

- name: set_task_status
  set_fact:
    task_status: "{{ task_answer.json.task.is_completed }}"

- name: proceed_if_created
  block:

  - name: set_server_id
    set_fact:
      server_id: "{{ task_answer.json.task.server_id }}"

  - name: print_server_id
    debug:
      msg: "{{ server_id }}"
  
    # get vm details
  - name: get_vm_details
    uri:
      url: "https://api.serverspace.ru/api/v1/servers/{{ server_id }}"
      method: GET
      headers:
        "x-api-key": "{{ xapikey }}"
      body_format: json
      status_code: 200
    register: vm_details
    changed_when: 200
    delegate_to: localhost

  - name: print_vm_details
    debug:
      msg: "{{ vm_details }}"
  
  - name: set_root_password
    set_fact:
      root_password: "{{ vm_details.json.server.password }}"
  
  - name: print_root_password
    debug:
      msg: "{{ root_password }}"

  - name: set_ip
    set_fact:
      server_ip: "{{ vm_details.json.server.nics[0].ip_address }}"
  
  - name: print_ip
    debug:
      msg: "{{ server_ip }}"
  
  - name: add_host_to_hosts
    shell: "echo '{{ server_ip }} {{ inventory_hostname }} # {{ vm_tag }}' >> /etc/hosts"
    become: yes
    delegate_to: localhost
    when: dns == "local"
  - name: test
    debug:
      msg: "{{ inventory_hostname }}"

  - name: clfl_add_dns_record
    uri:
      url: "https://api.cloudflare.com/client/v4/zones/{{ clfl_zone_id }}/dns_records"
      method: POST
      headers:
        "X-Auth-Key": "{{ clfl_auth_key }}"
        "X-Auth-Email": "{{ clfl_auth_email }}"
      body_format: json
      body:
        content: "{{ server_ip }}"
        name: "{{ vm_name }}"
        proxied: False
        type: "A"
        comment: "serverspace"
        ttl: 3600
      status_code: 200
    register: dns_records
    changed_when: 200
    delegate_to: localhost
    when: dns == "cloudflare"

  - name: sp_add_dns_record
    uri:
      url: "https://api.serverspace.{{ sp_domain }}/api/v1/domains/{{ user_domain_sp }}/records"
      method: POST
      headers:
        "x-api-key": "{{ xapikey }}"
      body_format: json
      body:
        ip: "{{ server_ip }}"
        name: "{{ vm_name }}.{{ user_domain_sp }}"
        type: "A"
        comment: "serverspace"
        ttl: "1h"
      status_code: 201
    register: sp_dns_record_add_result
    changed_when: 201
    delegate_to: localhost
    when: dns == "serverspace" and sp_dns_records.status == 200

  - name: wait_a_bit_for_public_dns_update
    pause:
      seconds: 30
      
  # here we add user to the server, and enable login-password login for the user
  - name: import_config_nix_tasks
    include_tasks: config_nix.yml
    when: os_family == 'nix'

  when: task_status == "Completed"