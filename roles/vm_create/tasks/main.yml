---

# print names
- debug:
    msg: "{{ inventory_hostname }}"

# get the local username under which the playbook is running
- name: get_the_username
  become: False
  local_action: command whoami
  register: local_username
  delegate_to: localhost

# delete records from the user's known_hosts
- name: delete_records_from_know_hosts
  shell: "ssh-keygen -f '/home/{{ local_username.stdout }}/.ssh/known_hosts' -R {{ inventory_hostname }}"
  delegate_to: localhost
  ignore_errors: True

# delete records from the user's known_hosts
- name: delete_records_from_know_hosts_no_path
  shell: "ssh-keygen -R {{ inventory_hostname }}"
  delegate_to: localhost
  ignore_errors: True

# create vms
- name: vm_create
  uri:
    url: "https://api.serverspace.ru/api/v1/servers"
    method: POST
    headers:
      "x-api-key": "{{ xapikey }}"
    body:
      location_id: "{{ locations.us_east }}"
      image_id: "{{ images.ub1804 }}"
      cpu: "{{ cpu.tiny | int }}"
      ram_mb: "{{ ram.tiny | int }}"
      volumes: [{
        "name": "boot",
        "size_mb": 25600
      }]
      networks: [{
        "bandwidth_mbps": 50
      }]
      name: "{{ inventory_hostname }}"
      ssh_key_ids: [8322]
      applications_ids: []
      server_init_script: ""
      tags: "tag1"
    body_format: json
    status_code: 201
  register: vm_create_result
  changed_when: 200
  delegate_to: localhost


# get droplets IPs
- name: vm_get_ip
  uri:
    url: "https://api.digitalocean.com/v2/droplets/{{ vm_create_result.json.droplet.id }}"
    method: GET
    headers:
      "Authorization": "Bearer {{ do_token }}"
    force_basic_auth: yes
    body_format: json
    status_code: 200
  register: vm_get_it
  changed_when: 200
  delegate_to: localhost

- name: breakpoint1
  shell: "echo breakpoint1"
  delegate_to: localhost

# print all the params of the newly created VM
- name: print params of # print network
  debug:
    msg: "{{ vm_get_it.json }}"

# print network
- debug:
    msg: "{{ vm_get_it.json.droplet.networks.v4 }}"

# print IP
- debug:
    msg: "{{ vm_get_it.json.droplet.networks.v4[0].ip_address }}"

- name: add_host_to_hosts
  shell: "echo '{{ vm_get_it.json.droplet.networks.v4[0].ip_address }} {{ inventory_hostname }} # {{ vm_tag }}' >> /etc/hosts"
  become: yes
  delegate_to: localhost

- name: get_etc_hosts
  shell: "cat /etc/hosts"
  delegate_to: localhost
  register: etc_hosts

- name: show_etc_hosts
  debug:
    msg: "{{ etc_hosts }}"

- pause:
    seconds: 5

- name: add_host_to_known_hosts
  shell: "ssh-keyscan -t rsa {{ inventory_hostname }} >> ~/.ssh/known_hosts"
  delegate_to: localhost
  register: add_host
  retries: 5
  delay: 30
  until: add_host.rc == 0

- name: add_host_to_known_hosts_rc
  shell: "echo $?"
  delegate_to: localhost
  register: add_host_rc

- name: show_result_of_adding_host
  debug:
    msg: 
      - "{{ add_host }}"
      - "{{ add_host_rc }}"
